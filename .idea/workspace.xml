<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c6448b02-b25e-4e43-95ed-dc1960bf2f24" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/clojure-deps.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/clojure-deps.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.nrepl-port" beforeDir="false" afterPath="$PROJECT_DIR$/.nrepl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/clojure-challenge.iml" beforeDir="false" afterPath="$PROJECT_DIR$/clojure-challenge.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/deps.edn" beforeDir="false" afterPath="$PROJECT_DIR$/deps.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/invoice_spec.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/invoice_spec.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/problem1.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/problem1.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="tools">
      <list>
        <Tool>
          <option name="alias" value="deps" />
          <option name="classpath">
            <list>
              <option value="$MAVEN_REPOSITORY$/javax/inject/javax.inject/1/javax.inject-1.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/data.json/2.4.0/data.json-2.4.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/clojure/1.11.1/clojure-1.11.1.jar" />
              <option value="$MAVEN_REPOSITORY$/commons-codec/commons-codec/1.11/commons-codec-1.11.jar" />
              <option value="$MAVEN_REPOSITORY$/com/cognitect/aws/api/0.8.612/api-0.8.612.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/codehaus/plexus/plexus-component-annotations/2.1.0/plexus-component-annotations-2.1.0.jar" />
              <option value="$MAVEN_REPOSITORY$/com/cognitect/aws/endpoints/1.1.12.321/endpoints-1.1.12.321.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/errorprone/error_prone_annotations/2.11.0/error_prone_annotations-2.11.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.logging/1.2.4/tools.logging-1.2.4.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar" />
              <option value="$MAVEN_REPOSITORY$/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.cli/1.0.214/tools.cli-1.0.214.jar" />
              <option value="$MAVEN_REPOSITORY$/org/eclipse/jetty/jetty-http/9.4.48.v20220622/jetty-http-9.4.48.v20220622.jar" />
              <option value="$MAVEN_REPOSITORY$/org/eclipse/jetty/jetty-util/9.4.48.v20220622/jetty-util-9.4.48.v20220622.jar" />
              <option value="$MAVEN_REPOSITORY$/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-transport-http/1.8.2/maven-resolver-transport-http-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-model-builder/3.8.6/maven-model-builder-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/codehaus/plexus/plexus-cipher/2.0/plexus-cipher-2.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/codehaus/plexus/plexus-utils/3.4.1/plexus-utils-3.4.1.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-transport-file/1.8.2/maven-resolver-transport-file-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.5/org.eclipse.sisu.plexus-0.3.5.jar" />
              <option value="$MAVEN_REPOSITORY$/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-settings-builder/3.8.6/maven-settings-builder-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar" />
              <option value="$MAVEN_REPOSITORY$/org/ow2/asm/asm/9.2/asm-9.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-settings/3.8.6/maven-settings-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/httpcomponents/httpcore/4.4.15/httpcore-4.4.15.jar" />
              <option value="$MAVEN_REPOSITORY$/org/codehaus/plexus/plexus-sec-dispatcher/2.0/plexus-sec-dispatcher-2.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-core/3.8.6/maven-core-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-api/1.8.2/maven-resolver-api-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/com/cognitect/http-client/1.0.115/http-client-1.0.115.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-resolver-provider/3.8.6/maven-resolver-provider-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.deps.cli/0.9.10/tools.deps.cli-0.9.10.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/guava/guava/31.1-android/guava-31.1-android.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/data.xml/0.2.0-alpha8/data.xml-0.2.0-alpha8.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-spi/1.8.2/maven-resolver-spi-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar" />
              <option value="$MAVEN_REPOSITORY$/org/slf4j/slf4j-nop/1.7.36/slf4j-nop-1.7.36.jar" />
              <option value="$MAVEN_REPOSITORY$/org/codehaus/plexus/plexus-classworlds/2.6.0/plexus-classworlds-2.6.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.deps/0.16.1260/tools.deps-0.16.1260.jar" />
              <option value="$MAVEN_REPOSITORY$/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar" />
              <option value="$MAVEN_REPOSITORY$/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/inject/guice/4.2.2/guice-4.2.2-no_aop.jar" />
              <option value="$MAVEN_REPOSITORY$/org/eclipse/jetty/jetty-client/9.4.48.v20220622/jetty-client-9.4.48.v20220622.jar" />
              <option value="$MAVEN_REPOSITORY$/org/eclipse/jetty/jetty-io/9.4.48.v20220622/jetty-io-9.4.48.v20220622.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/tools.gitlibs/2.4.181/tools.gitlibs-2.4.181.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-connector-basic/1.8.2/maven-resolver-connector-basic-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/com/cognitect/aws/s3/822.2.1145.0/s3-822.2.1145.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-impl/1.8.2/maven-resolver-impl-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-model/3.8.6/maven-model-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-util/1.8.2/maven-resolver-util-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/resolver/maven-resolver-named-locks/1.8.2/maven-resolver-named-locks-1.8.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/core.memoize/1.0.253/core.memoize-1.0.253.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-repository-metadata/3.8.6/maven-repository-metadata-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/data.priority-map/1.1.0/data.priority-map-1.1.0.jar" />
              <option value="$MAVEN_REPOSITORY$/aopalliance/aopalliance/1.0/aopalliance-1.0.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-builder-support/3.8.6/maven-builder-support-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-plugin-api/3.8.6/maven-plugin-api-3.8.6.jar" />
              <option value="$MAVEN_REPOSITORY$/org/clojure/core.async/1.6.673/core.async-1.6.673.jar" />
              <option value="$MAVEN_REPOSITORY$/org/apache/maven/maven-artifact/3.8.6/maven-artifact-3.8.6.jar" />
            </list>
          </option>
          <option name="moduleName" value="clojure-challenge" />
        </Tool>
        <Tool>
          <option name="alias" value="test" />
          <option name="moduleName" value="clojure-challenge" />
        </Tool>
      </list>
    </option>
  </component>
  <component name="DepsProjectDetails">
    <option name="cachedModuleDetails">
      <map>
        <entry key="$PROJECT_DIR$/deps.edn">
          <value>
            <ModuleDetails>
              <option name="details" value="{:paths [&quot;/Users/josephr/Documents/joseph/cursos/clojure-challenge/src&quot;], :deps {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;}, org.clojure/data.json {:mvn/version &quot;0.2.6&quot;}, org.clojure/test.check {:mvn/version &quot;1.1.1&quot;}, cheshire/cheshire {:mvn/version &quot;5.10.0&quot;}}, :aliases {:deps {:replace-paths [], :replace-deps {org.clojure/tools.deps.cli {:mvn/version &quot;0.9.10&quot;}}, :ns-default clojure.tools.deps.cli.api, :ns-aliases {help clojure.tools.deps.cli.help}}, :test {:extra-paths [&quot;/Users/josephr/Documents/joseph/cursos/clojure-challenge/test&quot;]}}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}}, :system-aliases #{:test :deps}, :deps-tree {org.clojure/data.json {:mvn/version &quot;0.2.6&quot;, :deps/manifest :mvn, :paths [&quot;/Users/josephr/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar&quot;], :dependents [], :children ()}, org.clojure/clojure {:mvn/version &quot;1.11.1&quot;, :deps/manifest :mvn, :paths [&quot;/Users/josephr/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot;], :dependents [], :children (org.clojure/core.specs.alpha org.clojure/spec.alpha)}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.62&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot;], :children ()}, org.clojure/spec.alpha {:mvn/version &quot;0.3.218&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;], :children ()}, com.fasterxml.jackson.dataformat/jackson-dataformat-cbor {:mvn/version &quot;2.10.2&quot;, :deps/manifest :mvn, :dependents [cheshire/cheshire], :paths [&quot;/Users/josephr/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-cbor/2.10.2/jackson-dataformat-cbor-2.10.2.jar&quot;], :children ()}, com.fasterxml.jackson.core/jackson-core {:mvn/version &quot;2.10.2&quot;, :deps/manifest :mvn, :dependents [cheshire/cheshire com.fasterxml.jackson.dataformat/jackson-dataformat-cbor com.fasterxml.jackson.dataformat/jackson-dataformat-smile], :paths [&quot;/Users/josephr/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.2/jackson-core-2.10.2.jar&quot;], :children ()}, cheshire/cheshire {:mvn/version &quot;5.10.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/josephr/.m2/repository/cheshire/cheshire/5.10.0/cheshire-5.10.0.jar&quot;], :dependents [], :children (com.fasterxml.jackson.dataformat/jackson-dataformat-cbor com.fasterxml.jackson.core/jackson-core tigris/tigris com.fasterxml.jackson.dataformat/jackson-dataformat-smile)}, tigris/tigris {:mvn/version &quot;0.1.2&quot;, :deps/manifest :mvn, :dependents [cheshire/cheshire], :paths [&quot;/Users/josephr/.m2/repository/tigris/tigris/0.1.2/tigris-0.1.2.jar&quot;], :children ()}, org.clojure/test.check {:mvn/version &quot;1.1.1&quot;, :deps/manifest :mvn, :paths [&quot;/Users/josephr/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar&quot;], :dependents [], :children ()}, com.fasterxml.jackson.dataformat/jackson-dataformat-smile {:mvn/version &quot;2.10.2&quot;, :deps/manifest :mvn, :dependents [cheshire/cheshire], :paths [&quot;/Users/josephr/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-smile/2.10.2/jackson-dataformat-smile-2.10.2.jar&quot;], :children ()}}, :test-paths [&quot;/Users/josephr/Documents/joseph/cursos/clojure-challenge/test&quot;], :tools {:deps {:deps-tree {javax.inject/javax.inject {:mvn/version &quot;1&quot;, :deps/manifest :mvn, :dependents [org.codehaus.plexus/plexus-sec-dispatcher org.clojure/tools.deps org.codehaus.plexus/plexus-cipher org.apache.maven/maven-settings-builder org.apache.maven/maven-model-builder com.google.inject/guice$no_aop org.apache.maven/maven-core org.apache.maven/maven-resolver-provider], :paths [&quot;/Users/josephr/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar&quot;], :children ()}, org.clojure/data.json {:mvn/version &quot;2.4.0&quot;, :deps/manifest :mvn, :dependents [com.cognitect.aws/api], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot;], :children ()}, org.clojure/clojure {:mvn/version &quot;1.11.1&quot;, :deps/manifest :mvn, :dependents [com.cognitect.aws/api org.clojure/tools.deps.cli], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot;], :children (org.clojure/core.specs.alpha org.clojure/spec.alpha)}, commons-codec/commons-codec {:mvn/version &quot;1.11&quot;, :deps/manifest :mvn, :dependents [org.apache.httpcomponents/httpclient], :paths [&quot;/Users/josephr/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar&quot;], :children ()}, com.cognitect.aws/api {:mvn/version &quot;0.8.612&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/com/cognitect/aws/api/0.8.612/api-0.8.612.jar&quot;], :children (org.clojure/data.json org.clojure/tools.logging com.cognitect/http-client org.clojure/core.async)}, org.clojure/tools.analyzer {:mvn/version &quot;1.1.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar&quot;], :children ()}, org.codehaus.plexus/plexus-component-annotations {:mvn/version &quot;2.1.0&quot;, :exclusions #{junit/junit}, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/codehaus/plexus/plexus-component-annotations/2.1.0/plexus-component-annotations-2.1.0.jar&quot;], :children ()}, com.cognitect.aws/endpoints {:mvn/version &quot;1.1.12.321&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/com/cognitect/aws/endpoints/1.1.12.321/endpoints-1.1.12.321.jar&quot;], :children ()}, com.google.errorprone/error_prone_annotations {:mvn/version &quot;2.11.0&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/Users/josephr/.m2/repository/com/google/errorprone/error_prone_annotations/2.11.0/error_prone_annotations-2.11.0.jar&quot;], :children ()}, org.apache.commons/commons-lang3 {:mvn/version &quot;3.12.0&quot;, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-impl], :paths [&quot;/Users/josephr/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar&quot;], :children ()}, org.clojure/tools.logging {:mvn/version &quot;1.2.4&quot;, :deps/manifest :mvn, :dependents [com.cognitect.aws/api], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.logging/1.2.4/tools.logging-1.2.4.jar&quot;], :children ()}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.62&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot;], :children ()}, javax.annotation/javax.annotation-api {:mvn/version &quot;1.3.2&quot;, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-impl], :paths [&quot;/Users/josephr/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar&quot;], :children ()}, org.clojure/spec.alpha {:mvn/version &quot;0.3.218&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;], :children ()}, org.clojure/tools.cli {:mvn/version &quot;1.0.214&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.cli/1.0.214/tools.cli-1.0.214.jar&quot;], :children ()}, org.eclipse.jetty/jetty-http {:mvn/version &quot;9.4.48.v20220622&quot;, :deps/manifest :mvn, :dependents [com.cognitect/http-client org.eclipse.jetty/jetty-client], :paths [&quot;/Users/josephr/.m2/repository/org/eclipse/jetty/jetty-http/9.4.48.v20220622/jetty-http-9.4.48.v20220622.jar&quot;], :children (org.eclipse.jetty/jetty-io)}, org.eclipse.jetty/jetty-util {:mvn/version &quot;9.4.48.v20220622&quot;, :deps/manifest :mvn, :dependents [com.cognitect/http-client org.eclipse.jetty/jetty-io org.eclipse.jetty/jetty-http], :paths [&quot;/Users/josephr/.m2/repository/org/eclipse/jetty/jetty-util/9.4.48.v20220622/jetty-util-9.4.48.v20220622.jar&quot;], :children ()}, org.slf4j/jcl-over-slf4j {:mvn/version &quot;1.7.36&quot;, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-transport-http], :paths [&quot;/Users/josephr/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.36/jcl-over-slf4j-1.7.36.jar&quot;], :children ()}, org.clojure/tools.analyzer.jvm {:mvn/version &quot;1.2.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.async], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar&quot;], :children (org.clojure/tools.analyzer org.ow2.asm/asm org.clojure/tools.reader org.clojure/core.memoize)}, org.apache.maven.resolver/maven-resolver-transport-http {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-http/1.8.2/maven-resolver-transport-http-1.8.2.jar&quot;], :children (org.slf4j/jcl-over-slf4j org.apache.httpcomponents/httpcore org.apache.httpcomponents/httpclient)}, org.apache.maven/maven-model-builder {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core org.apache.maven/maven-resolver-provider], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-model-builder/3.8.6/maven-model-builder-3.8.6.jar&quot;], :children ()}, org.codehaus.plexus/plexus-cipher {:mvn/version &quot;2.0&quot;, :deps/manifest :mvn, :dependents [org.codehaus.plexus/plexus-sec-dispatcher], :paths [&quot;/Users/josephr/.m2/repository/org/codehaus/plexus/plexus-cipher/2.0/plexus-cipher-2.0.jar&quot;], :children ()}, org.codehaus.plexus/plexus-utils {:mvn/version &quot;3.4.1&quot;, :deps/manifest :mvn, :dependents [org.codehaus.plexus/plexus-sec-dispatcher], :paths [&quot;/Users/josephr/.m2/repository/org/codehaus/plexus/plexus-utils/3.4.1/plexus-utils-3.4.1.jar&quot;], :children ()}, org.apache.maven.resolver/maven-resolver-transport-file {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-transport-file/1.8.2/maven-resolver-transport-file-1.8.2.jar&quot;], :children ()}, org.eclipse.sisu/org.eclipse.sisu.plexus {:mvn/version &quot;0.3.5&quot;, :exclusions #{javax.enterprise/cdi-api}, :deps/manifest :mvn, :dependents [org.apache.maven/maven-plugin-api org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.5/org.eclipse.sisu.plexus-0.3.5.jar&quot;], :children ()}, commons-io/commons-io {:mvn/version &quot;2.11.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar&quot;], :children ()}, org.apache.maven/maven-settings-builder {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-settings-builder/3.8.6/maven-settings-builder-3.8.6.jar&quot;], :children (org.codehaus.plexus/plexus-sec-dispatcher)}, com.google.guava/listenablefuture {:mvn/version &quot;9999.0-empty-to-avoid-conflict-with-guava&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/Users/josephr/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar&quot;], :children ()}, org.ow2.asm/asm {:mvn/version &quot;9.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/josephr/.m2/repository/org/ow2/asm/asm/9.2/asm-9.2.jar&quot;], :children ()}, org.apache.maven/maven-settings {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-settings-builder org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-settings/3.8.6/maven-settings-3.8.6.jar&quot;], :children ()}, org.apache.httpcomponents/httpcore {:mvn/version &quot;4.4.15&quot;, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-transport-http], :paths [&quot;/Users/josephr/.m2/repository/org/apache/httpcomponents/httpcore/4.4.15/httpcore-4.4.15.jar&quot;], :children ()}, org.codehaus.plexus/plexus-sec-dispatcher {:mvn/version &quot;2.0&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-settings-builder], :paths [&quot;/Users/josephr/.m2/repository/org/codehaus/plexus/plexus-sec-dispatcher/2.0/plexus-sec-dispatcher-2.0.jar&quot;], :children (org.codehaus.plexus/plexus-cipher org.codehaus.plexus/plexus-utils)}, org.apache.maven/maven-core {:mvn/version &quot;3.8.6&quot;, :exclusions #{commons-io/commons-io com.google.guava/guava}, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-core/3.8.6/maven-core-3.8.6.jar&quot;], :children (org.codehaus.plexus/plexus-component-annotations org.apache.maven/maven-model-builder org.eclipse.sisu/org.eclipse.sisu.plexus org.apache.maven/maven-settings-builder org.apache.maven/maven-settings org.apache.maven.shared/maven-shared-utils org.codehaus.plexus/plexus-classworlds org.codehaus.plexus/plexus-interpolation com.google.inject/guice$no_aop org.apache.maven/maven-model org.eclipse.sisu/org.eclipse.sisu.inject org.apache.maven/maven-repository-metadata org.apache.maven/maven-builder-support org.apache.maven/maven-plugin-api org.apache.maven/maven-artifact)}, org.apache.maven.resolver/maven-resolver-api {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-util org.clojure/tools.deps org.apache.maven.resolver/maven-resolver-spi org.apache.maven.resolver/maven-resolver-impl org.apache.maven.resolver/maven-resolver-transport-http org.apache.maven.resolver/maven-resolver-connector-basic org.apache.maven.resolver/maven-resolver-transport-file], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-api/1.8.2/maven-resolver-api-1.8.2.jar&quot;], :children ()}, com.cognitect/http-client {:mvn/version &quot;1.0.115&quot;, :deps/manifest :mvn, :dependents [com.cognitect.aws/api], :paths [&quot;/Users/josephr/.m2/repository/com/cognitect/http-client/1.0.115/http-client-1.0.115.jar&quot;], :children (org.eclipse.jetty/jetty-http org.eclipse.jetty/jetty-util org.eclipse.jetty/jetty-client)}, org.apache.maven/maven-resolver-provider {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-resolver-provider/3.8.6/maven-resolver-provider-3.8.6.jar&quot;], :children ()}, org.apache.maven.shared/maven-shared-utils {:mvn/version &quot;3.3.4&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar&quot;], :children ()}, org.clojure/tools.deps.cli {:mvn/version &quot;0.9.10&quot;, :deps/manifest :mvn, :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.deps.cli/0.9.10/tools.deps.cli-0.9.10.jar&quot;], :dependents [], :children (org.clojure/clojure org.slf4j/slf4j-nop org.clojure/tools.deps)}, com.google.guava/failureaccess {:mvn/version &quot;1.0.1&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/Users/josephr/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar&quot;], :children ()}, com.google.guava/guava {:mvn/version &quot;31.1-android&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/com/google/guava/guava/31.1-android/guava-31.1-android.jar&quot;], :children (com.google.errorprone/error_prone_annotations com.google.guava/listenablefuture com.google.guava/failureaccess com.google.j2objc/j2objc-annotations org.checkerframework/checker-qual com.google.code.findbugs/jsr305)}, org.clojure/data.xml {:mvn/version &quot;0.2.0-alpha8&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps com.cognitect.aws/api], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/data.xml/0.2.0-alpha8/data.xml-0.2.0-alpha8.jar&quot;], :children ()}, org.apache.maven.resolver/maven-resolver-spi {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps org.apache.maven.resolver/maven-resolver-impl org.apache.maven.resolver/maven-resolver-transport-http org.apache.maven.resolver/maven-resolver-connector-basic org.apache.maven.resolver/maven-resolver-transport-file], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-spi/1.8.2/maven-resolver-spi-1.8.2.jar&quot;], :children ()}, com.google.j2objc/j2objc-annotations {:mvn/version &quot;1.3&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/Users/josephr/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar&quot;], :children ()}, org.slf4j/slf4j-nop {:mvn/version &quot;1.7.36&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps.cli], :paths [&quot;/Users/josephr/.m2/repository/org/slf4j/slf4j-nop/1.7.36/slf4j-nop-1.7.36.jar&quot;], :children (org.slf4j/slf4j-api)}, org.codehaus.plexus/plexus-classworlds {:mvn/version &quot;2.6.0&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-plugin-api org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/codehaus/plexus/plexus-classworlds/2.6.0/plexus-classworlds-2.6.0.jar&quot;], :children ()}, org.clojure/tools.deps {:mvn/version &quot;0.16.1260&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps.cli], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.deps/0.16.1260/tools.deps-0.16.1260.jar&quot;], :children (javax.inject/javax.inject com.cognitect.aws/api com.cognitect.aws/endpoints org.clojure/tools.cli org.apache.maven.resolver/maven-resolver-transport-http org.apache.maven.resolver/maven-resolver-transport-file commons-io/commons-io org.apache.maven/maven-core org.apache.maven.resolver/maven-resolver-api org.apache.maven/maven-resolver-provider com.google.guava/guava org.clojure/data.xml org.apache.maven.resolver/maven-resolver-spi org.clojure/tools.gitlibs org.apache.maven.resolver/maven-resolver-connector-basic com.cognitect.aws/s3 org.apache.maven.resolver/maven-resolver-impl org.apache.maven.resolver/maven-resolver-util)}, org.codehaus.plexus/plexus-interpolation {:mvn/version &quot;1.26&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-settings-builder org.apache.maven/maven-model-builder org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar&quot;], :children ()}, org.apache.httpcomponents/httpclient {:mvn/version &quot;4.5.13&quot;, :exclusions #{commons-logging/commons-logging}, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-transport-http], :paths [&quot;/Users/josephr/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar&quot;], :children (commons-codec/commons-codec)}, org.checkerframework/checker-qual {:mvn/version &quot;3.12.0&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/Users/josephr/.m2/repository/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0.jar&quot;], :children ()}, com.google.inject/guice$no_aop {:mvn/version &quot;4.2.2&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/com/google/inject/guice/4.2.2/guice-4.2.2-no_aop.jar&quot;], :children (aopalliance/aopalliance)}, org.eclipse.jetty/jetty-client {:mvn/version &quot;9.4.48.v20220622&quot;, :deps/manifest :mvn, :dependents [com.cognitect/http-client], :paths [&quot;/Users/josephr/.m2/repository/org/eclipse/jetty/jetty-client/9.4.48.v20220622/jetty-client-9.4.48.v20220622.jar&quot;], :children ()}, org.eclipse.jetty/jetty-io {:mvn/version &quot;9.4.48.v20220622&quot;, :deps/manifest :mvn, :dependents [org.eclipse.jetty/jetty-http org.eclipse.jetty/jetty-client], :paths [&quot;/Users/josephr/.m2/repository/org/eclipse/jetty/jetty-io/9.4.48.v20220622/jetty-io-9.4.48.v20220622.jar&quot;], :children ()}, org.clojure/tools.reader {:mvn/version &quot;1.3.6&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar&quot;], :children ()}, org.clojure/tools.gitlibs {:mvn/version &quot;2.4.181&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/tools.gitlibs/2.4.181/tools.gitlibs-2.4.181.jar&quot;], :children ()}, org.apache.maven.resolver/maven-resolver-connector-basic {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-connector-basic/1.8.2/maven-resolver-connector-basic-1.8.2.jar&quot;], :children ()}, com.cognitect.aws/s3 {:mvn/version &quot;822.2.1145.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/com/cognitect/aws/s3/822.2.1145.0/s3-822.2.1145.0.jar&quot;], :children ()}, org.apache.maven.resolver/maven-resolver-impl {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-impl/1.8.2/maven-resolver-impl-1.8.2.jar&quot;], :children (org.apache.commons/commons-lang3 javax.annotation/javax.annotation-api org.apache.maven.resolver/maven-resolver-named-locks)}, org.slf4j/slf4j-api {:mvn/version &quot;1.7.36&quot;, :deps/manifest :mvn, :dependents [org.slf4j/slf4j-nop org.apache.maven.resolver/maven-resolver-named-locks org.apache.maven.resolver/maven-resolver-impl org.apache.maven.resolver/maven-resolver-transport-http org.slf4j/jcl-over-slf4j org.apache.maven.resolver/maven-resolver-connector-basic org.apache.maven/maven-core org.apache.maven.resolver/maven-resolver-transport-file], :paths [&quot;/Users/josephr/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar&quot;], :children ()}, org.apache.maven/maven-model {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-plugin-api org.apache.maven/maven-model-builder org.apache.maven/maven-core org.apache.maven/maven-resolver-provider], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-model/3.8.6/maven-model-3.8.6.jar&quot;], :children ()}, org.eclipse.sisu/org.eclipse.sisu.inject {:mvn/version &quot;0.3.5&quot;, :deps/manifest :mvn, :dependents [org.eclipse.sisu/org.eclipse.sisu.plexus org.apache.maven/maven-model-builder org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.5/org.eclipse.sisu.inject-0.3.5.jar&quot;], :children ()}, org.apache.maven.resolver/maven-resolver-util {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.deps org.apache.maven.resolver/maven-resolver-impl org.apache.maven.resolver/maven-resolver-transport-http org.apache.maven.resolver/maven-resolver-connector-basic], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-util/1.8.2/maven-resolver-util-1.8.2.jar&quot;], :children ()}, org.apache.maven.resolver/maven-resolver-named-locks {:mvn/version &quot;1.8.2&quot;, :deps/manifest :mvn, :dependents [org.apache.maven.resolver/maven-resolver-impl], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/resolver/maven-resolver-named-locks/1.8.2/maven-resolver-named-locks-1.8.2.jar&quot;], :children ()}, org.clojure/core.memoize {:mvn/version &quot;1.0.253&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/core.memoize/1.0.253/core.memoize-1.0.253.jar&quot;], :children (org.clojure/core.cache)}, org.apache.maven/maven-repository-metadata {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core org.apache.maven/maven-resolver-provider], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-repository-metadata/3.8.6/maven-repository-metadata-3.8.6.jar&quot;], :children ()}, org.clojure/data.priority-map {:mvn/version &quot;1.1.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.cache], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/data.priority-map/1.1.0/data.priority-map-1.1.0.jar&quot;], :children ()}, aopalliance/aopalliance {:mvn/version &quot;1.0&quot;, :deps/manifest :mvn, :dependents [com.google.inject/guice$no_aop], :paths [&quot;/Users/josephr/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar&quot;], :children ()}, org.apache.maven/maven-builder-support {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-settings-builder org.apache.maven/maven-model-builder org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-builder-support/3.8.6/maven-builder-support-3.8.6.jar&quot;], :children ()}, com.google.code.findbugs/jsr305 {:mvn/version &quot;3.0.2&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/Users/josephr/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar&quot;], :children ()}, org.clojure/core.cache {:mvn/version &quot;1.0.225&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.memoize], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar&quot;], :children (org.clojure/data.priority-map)}, org.apache.maven/maven-plugin-api {:mvn/version &quot;3.8.6&quot;, :deps/manifest :mvn, :dependents [org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-plugin-api/3.8.6/maven-plugin-api-3.8.6.jar&quot;], :children ()}, org.clojure/core.async {:mvn/version &quot;1.6.673&quot;, :deps/manifest :mvn, :dependents [com.cognitect.aws/api], :paths [&quot;/Users/josephr/.m2/repository/org/clojure/core.async/1.6.673/core.async-1.6.673.jar&quot;], :children (org.clojure/tools.analyzer.jvm)}, org.apache.maven/maven-artifact {:mvn/version &quot;3.8.6&quot;, :exclusions #{org.apache.maven.wagon/wagon-provider-api}, :deps/manifest :mvn, :dependents [org.apache.maven/maven-plugin-api org.apache.maven/maven-model-builder org.apache.maven/maven-core], :paths [&quot;/Users/josephr/.m2/repository/org/apache/maven/maven-artifact/3.8.6/maven-artifact-3.8.6.jar&quot;], :children ()}}}, :test {:deps-tree {}}}}" />
              <option name="hash" value="f8adbd0126d6758f59f8f30f9533c929" />
            </ModuleDetails>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2N1OXMMLMWmtdfEwpGGIetFoMUr" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;cursive.last.file.extension./Users/josephr/Documents/joseph/cursos/clojure-challenge/src&quot;: &quot;clj&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/josephr/Documents/joseph/cursos/clojure-challenge&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;
  }
}</component>
  <component name="ReplState" timestamp="1682577647414">{:repl-history {:ide [], :local [{:command &quot;(json-str)&quot;, :offset 9, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-customer [json]\n  {:company_name (get-in json [:customer \&quot;company_name\&quot;])\n   :email (get-in json [:customer \&quot;email\&quot;])})&quot;, :offset 131, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-taxes [taxes]\n  (map (fn [tax]\n         {:tax_category (keyword (get tax \&quot;tax_category\&quot;))\n          :tax_rate (get tax \&quot;tax_rate\&quot;)})\n       taxes))&quot;, :offset 159, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-item [item]\n  {:price (get item \&quot;price\&quot;)\n   :quantity (get item \&quot;quantity\&quot;)\n   :sku (get item \&quot;sku\&quot;)\n   :taxes (parse-taxes (get item \&quot;taxes\&quot;))})&quot;, :offset 157, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-retentions [retentions]\n  (parse-taxes retentions))&quot;, :offset 63, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-invoice [json]\n  (-&gt; json\n      (get \&quot;invoice\&quot;)\n      (assoc :customer (parse-customer (get-in json [:invoice :customer])))\n      (update :items #(map parse-item %))\n      (update :retentions parse-retentions)))&quot;, :offset 223, :ns &quot;invoice-spec&quot;} {:command &quot;(def invoice (json/parse-string json-str))&quot;, :offset 42, :ns &quot;invoice-spec&quot;} {:command &quot;(def json-str (slurp \&quot;invoice.json\&quot;))&quot;, :offset 37, :ns &quot;invoice-spec&quot;} {:command &quot;(def data (parse-invoice invoice))\n&quot;, :offset 35, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-customer [invoice]\n  {:company_name (get-in invoice [:customer \&quot;company_name\&quot;])\n   :email (get-in invoice [:customer \&quot;email\&quot;])})&quot;, :offset 140, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-invoice [json]\n  (-&gt; json\n      (get \&quot;invoice\&quot;)\n      (assoc :customer (parse-customer (get-in json [:invoice])))\n      (update :items #(map parse-item %))\n      (update :retentions parse-retentions)))&quot;, :offset 213, :ns &quot;invoice-spec&quot;} {:command &quot;(def invoice (json1/parse-string json-str))&quot;, :offset 43, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice {issue_date 13/10/2020, order_reference PEDID_0001, items [{price 10000.0, quantity 1.0, sku SUPER-1, taxes [{tax_category IVA, tax_rate 5}]} {price 20000.0, quantity 1.0, sku SUPER-2, taxes [{tax_category IVA, tax_rate 19}]} {price 30000.0, quantity 1.0, sku SUPER-3, taxes [{tax_category IVA, tax_rate 19}]}], :customer {:company_name nil, :email nil}, payment_means_type DEBITO, retentions [{tax_category RET_FUENTE, tax_rate 15.0} {tax_category RET_IVA, tax_rate 15.0}], number 1, payment_date 12/11/2020, customer {company_name ANDRADE RODRIGUEZ MANUEL ALEJANDRO, email cgallegoaecu@gmail.com}, :items (), payment_means DEBIT_CARD, :retentions ()}\n           )&quot;, :offset 686, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice {issue_date  \&quot;13/10/2020\&quot;, order_reference PEDID_0001, items [{price 10000.0, quantity 1.0, sku SUPER-1, taxes [{tax_category IVA, tax_rate 5}]} {price 20000.0, quantity 1.0, sku SUPER-2, taxes [{tax_category IVA, tax_rate 19}]} {price 30000.0, quantity 1.0, sku SUPER-3, taxes [{tax_category IVA, tax_rate 19}]}], :customer {:company_name nil, :email nil}, payment_means_type DEBITO, retentions [{tax_category RET_FUENTE, tax_rate 15.0} {tax_category RET_IVA, tax_rate 15.0}], number 1, payment_date  \&quot;12/11/2020\&quot;, customer {company_name ANDRADE RODRIGUEZ MANUEL ALEJANDRO, email cgallegoaecu@gmail.com}, :items (), payment_means DEBIT_CARD, :retentions ()}\n           )&quot;, :offset 692, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice {\n                      issue_date  \&quot;13/10/2020\&quot;,\n                      order_reference \&quot;PEDID_0001\&quot;, \n                      items [\n                             {\n                              price 10000.0, \n                              quantity 1.0, \n                              sku \&quot;SUPER-1\&quot;, \n                              taxes [\n                                     {tax_category IVA, tax_rate 5}]} \n                             {\n                              price 20000.0, \n                              quantity 1.0, \n                              sku \&quot;SUPER-2\&quot;, \n                              taxes [{tax_category IVA, tax_rate 19}]} \n                             {\n                              price 30000.0, \n                              quantity 1.0, \n                              sku \&quot;SUPER-3\&quot;, \n                              taxes [{tax_category IVA, tax_rate 19}]}\n                             ], \n                      :customer {:company_name nil, :email nil}, \n                      payment_means_type \&quot;DEBITO\&quot;, \n                      retentions [\n                                  {tax_category RET_FUENTE, tax_rate 15.0} \n                                  {tax_category RET_IVA, tax_rate 15.0}], \n                      number 1, \n                      payment_date  \&quot;12/11/2020\&quot;, \n                      customer {company_name ANDRADE RODRIGUEZ MANUEL ALEJANDRO, email cgallegoaecu@gmail.com}, \n                      :items (), payment_means \&quot;DEBIT_CARD\&quot;, :retentions ()})&quot;, :offset 1492, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice {\n                      issue_date  \&quot;13/10/2020\&quot;,\n                      order_reference \&quot;PEDID_0001\&quot;, \n                      items [\n                             {\n                              price 10000.0, \n                              quantity 1.0, \n                              sku \&quot;SUPER-1\&quot;, \n                              taxes [\n                                     {tax_category IVA, tax_rate 5}]} \n                             {\n                              price 20000.0, \n                              quantity 1.0, \n                              sku \&quot;SUPER-2\&quot;, \n                              taxes [{tax_category IVA, tax_rate 19}]} \n                             {\n                              price 30000.0, \n                              quantity 1.0, \n                              sku \&quot;SUPER-3\&quot;, \n                              taxes [{tax_category IVA, tax_rate 19}]}\n                             ], \n                      :customer {:company_name nil, :email nil}, \n                      payment_means_type \&quot;DEBITO\&quot;, \n                      retentions [\n                                  {tax_category RET_FUENTE, tax_rate 15.0} \n                                  {tax_category RET_IVA, tax_rate 15.0}], \n                      number 1, \n                      payment_date  \&quot;12/11/2020\&quot;, \n                      customer {company_name ANDRADE RODRIGUEZ MANUEL ALEJANDRO, email cgallegoaecu@gmail.com}, \n                      payment_means \&quot;DEBIT_CARD\&quot;})&quot;, :offset 1330, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice #:invoice\n        {:issue_date \&quot;13/10/2020\&quot;,\n         :payment_means_type \&quot;DEBITO\&quot;,\n         :number \&quot;1\&quot;,\n         :order_reference \&quot;PEDID_0001\&quot;,\n         :payment_date \&quot;12/11/2020\&quot;,\n         :payment_means \&quot;DEBIT_CARD\&quot;,\n         :customer {:customer/company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :customer/email \&quot;cgallegoaecu@gmail.com\&quot;},\n         :items [#:invoice-item{:price -1.0,\n                                :quantity 2.0,\n                                :sku \&quot;\&quot;,\n                                :taxes [#:tax{:tax_category :iva, :tax_rate ##Inf}\n                                        #:tax{:tax_category :iva, :tax_rate 2.0}\n                                        #:tax{:tax_category :iva, :tax_rate 0.5}]}],\n         :retentions [#:tax{:tax_category :iva, :tax_rate 2.0}\n                      #:tax{:tax_category :iva, :tax_rate 0.5}\n                      #:tax{:tax_category :iva, :tax_rate 0.5}\n                      #:tax{:tax_category :iva, :tax_rate 1.0}]\n         })&quot;, :offset 337, :ns &quot;invoice-spec&quot;} {:command &quot;(defn parse-customer [invoice]\n  {:company_name (get-in invoice [:company_name \&quot;:customer/company_name\&quot;])\n   :email (get-in invoice [:email \&quot;:customer/email\&quot;])})&quot;, :offset 161, :ns &quot;invoice-spec&quot;} {:command &quot;(def invoice (clojure.data.json/read-str json-str))&quot;, :offset 51, :ns &quot;invoice-spec&quot;} {:command &quot;(def data (parse-invoice invoice))&quot;, :offset 34, :ns &quot;invoice-spec&quot;} {:command &quot;(println data)&quot;, :offset 13, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice \n        {:invoice/issue_date \&quot;13/10/2020\&quot;,\n         :invoice/payment_means_type \&quot;DEBITO\&quot;,\n         :invoice/number \&quot;1\&quot;,\n         :invoice/order_reference \&quot;PEDID_0001\&quot;,\n         :invoice/payment_date \&quot;12/11/2020\&quot;,\n         :invoice/payment_means \&quot;DEBIT_CARD\&quot;,\n         :invoice/customer {:customer/company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :customer/email \&quot;cgallegoaecu@gmail.com\&quot;},\n         :invoice/items [#:invoice-item{:price -1.0,\n                                :quantity 2.0,\n                                :sku \&quot;\&quot;,\n                                :taxes [#:tax{:tax_category :iva, :tax_rate ##Inf}\n                                        #:tax{:tax_category :iva, :tax_rate 2.0}\n                                        #:tax{:tax_category :iva, :tax_rate 0.5}]}],\n         :invoice/retentions [#:tax{:tax_category :iva, :tax_rate 2.0}\n                      #:tax{:tax_category :iva, :tax_rate 0.5}\n                      #:tax{:tax_category :iva, :tax_rate 0.5}\n                      #:tax{:tax_category :iva, :tax_rate 1.0}]\n         })\n&quot;, :offset 820, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice \n        {:invoice/issue_date \&quot;13/10/2020\&quot;,\n         :invoice/payment_means_type \&quot;DEBITO\&quot;,\n         :invoice/number \&quot;1\&quot;,\n         :invoice/order_reference \&quot;PEDID_0001\&quot;,\n         :invoice/payment_date \&quot;12/11/2020\&quot;,\n         :invoice/payment_means \&quot;DEBIT_CARD\&quot;,\n         :invoice/customer {:customer/company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :customer/email \&quot;cgallegoaecu@gmail.com\&quot;},\n         :invoice/items [#:invoice-item{:price -1.0,\n                                :quantity 2.0,\n                                :sku \&quot;\&quot;,\n                                :taxes [#:tax{:tax_category :iva, :tax_rate ##Inf}\n                                        #:tax{:tax_category :iva, :tax_rate 2.0}\n                                        #:tax{:tax_category :iva, :tax_rate 0.5}]}],\n         :invoice/retentions [{:tax/tax_category :iva, :tax/tax_rate 2.0}\n                      {:tax/tax_category :iva, :tax/tax_rate 0.5}\n                      {:tax/tax_category :iva, :tax/tax_rate 0.5}\n                      {:tax/tax_category :iva, :tax/tax_rate 1.0}]\n         })\n&quot;, :offset 1030, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice \n        {:invoice/issue_date \&quot;13/10/2020\&quot;,\n         :invoice/payment_means_type \&quot;DEBITO\&quot;,\n         :invoice/number \&quot;1\&quot;,\n         :invoice/order_reference \&quot;PEDID_0001\&quot;,\n         :invoice/payment_date \&quot;12/11/2020\&quot;,\n         :invoice/payment_means \&quot;DEBIT_CARD\&quot;,\n         :invoice/customer {:customer/company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :customer/email \&quot;cgallegoaecu@gmail.com\&quot;},\n         :invoice/items [#:invoice-item{:price -1.0,\n                                :quantity 2.0,\n                                :sku \&quot;\&quot;,\n                                :taxes [{:tax/tax_category :iva, :tax/tax_rate ##Inf}\n                                        {:tax/tax_category :iva, :tax/tax_rate 2.0}\n                                        {:tax/tax_category :iva, :tax/tax_rate 0.5}]}],\n         :invoice/retentions [{:tax/tax_category :iva, :tax/tax_rate 2.0}\n                      {:tax/tax_category :iva, :tax/tax_rate 0.5}\n                      {:tax/tax_category :iva, :tax/tax_rate 0.5}\n                      {:tax/tax_category :iva, :tax/tax_rate 1.0}]\n         })\n&quot;, :offset 793, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice \n        {:invoice/issue_date \&quot;13/10/2020\&quot;,\n         :invoice/payment_means_type \&quot;DEBITO\&quot;,\n         :invoice/number \&quot;1\&quot;,\n         :invoice/order_reference \&quot;PEDID_0001\&quot;,\n         :invoice/payment_date \&quot;12/11/2020\&quot;,\n         :invoice/payment_means \&quot;DEBIT_CARD\&quot;,\n         :invoice/customer {:customer/company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :customer/email \&quot;cgallegoaecu@gmail.com\&quot;},\n         :invoice/items [{:invoice-item/price -1.0,\n                          :invoice-item/quantity 2.0,\n                          :invoice-item/sku \&quot;\&quot;,\n                          :invoice-item/taxes [{:tax/tax_category :iva, :tax/tax_rate ##Inf}\n                                        {:tax/tax_category :iva, :tax/tax_rate 2.0}\n                                        {:tax/tax_category :iva, :tax/tax_rate 0.5}]}],\n         :invoice/retentions [{:tax/tax_category :iva, :tax/tax_rate 2.0}\n                      {:tax/tax_category :iva, :tax/tax_rate 0.5}\n                      {:tax/tax_category :iva, :tax/tax_rate 0.5}\n                      {:tax/tax_category :iva, :tax/tax_rate 1.0}]\n         })\n&quot;, :offset 606, :ns &quot;invoice-spec&quot;} {:command &quot;(ns invoice-spec\n  (:require\n    [clojure.data.json :as json]\n    [clojure.spec.alpha :as s]\n    [clojure.spec.gen.alpha :as gen]\n    [cheshire.core :as json1]))&quot;, :offset 161, :ns &quot;user&quot;} {:command &quot;(s/def :invoice/payment_date string?)\n(s/def :invoice/payment_means string?)\n(s/def :invoice/payment-means-type string?)\n(s/def :invoice/order_reference string?)\n(s/def :invoice/number string?)\n(s/def :customer/company_name string?)\n(s/def :customer/email string?)\n(s/def :invoice/customer (s/keys :req [:customer/company_name\n                                       :customer/email]))\n\n(s/def :tax/tax_rate double?)\n(s/def :tax/tax_category #{:iva})\n(s/def ::tax (s/keys :req [:tax/tax_category\n                           :tax/tax_rate]))\n(s/def :invoice-item/taxes (s/coll-of ::tax :kind vector? :min-count 1))\n\n(s/def :invoice-item/price double?)\n(s/def :invoice-item/quantity double?)\n(s/def :invoice-item/sku string?)\n\n(s/def ::invoice-item\n  (s/keys :req [:invoice-item/price\n                :invoice-item/quantity\n                :invoice-item/sku\n                :invoice-item/taxes]))\n\n(s/def :invoice/issue_date string?)\n(s/def :invoice/items (s/coll-of ::invoice-item :kind vector? :min-count 1))\n\n(s/def :invoice/retentions (s/coll-of ::tax :kind vector? :min-count 1))\n\n(s/def ::invoice\n  (s/keys :req [:invoice/payment_means_type\n                :invoice/number\n                :invoice/issue_date\n                :invoice/payment_date\n                :invoice/customer\n                :invoice/payment_means\n                :invoice/items\n                :invoice/retentions]))&quot;, :offset 1391, :ns &quot;invoice-spec&quot;} {:command &quot;(def json-str (slurp \&quot;invoice.json\&quot;))\n(def invoice-data (json1/parse-string json-str true))&quot;, :offset 91, :ns &quot;invoice-spec&quot;} {:command &quot;(prn invoice-data)&quot;, :offset 18, :ns &quot;invoice-spec&quot;} {:command &quot;* (s/valid? ::invoice {:invoice {:payment_means_type \&quot;DEBITO\&quot;, :order_reference \&quot;PEDID_0001\&quot;, :number \&quot;1\&quot;, :issue_date \&quot;13/10/2020\&quot;, :payment_date \&quot;12/11/2020\&quot;, :customer {:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;}, :payment_means \&quot;DEBIT_CARD\&quot;, :items [{:price 10000.0, :quantity 1.0, :sku \&quot;SUPER-1\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 5}]} {:price 20000.0, :quantity 1.0, :sku \&quot;SUPER-2\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]} {:price 30000.0, :quantity 1.0, :sku \&quot;SUPER-3\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]}], :retentions [{:tax_category \&quot;RET_FUENTE\&quot;, :tax_rate 15.0} {:tax_category \&quot;RET_IVA\&quot;, :tax_rate 15.0}]}})&quot;, :offset 680, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice {:invoice {:payment_means_type \&quot;DEBITO\&quot;, :order_reference \&quot;PEDID_0001\&quot;, :number \&quot;1\&quot;, :issue_date \&quot;13/10/2020\&quot;, :payment_date \&quot;12/11/2020\&quot;, :customer {:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;}, :payment_means \&quot;DEBIT_CARD\&quot;, :items [{:price 10000.0, :quantity 1.0, :sku \&quot;SUPER-1\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 5}]} {:price 20000.0, :quantity 1.0, :sku \&quot;SUPER-2\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]} {:price 30000.0, :quantity 1.0, :sku \&quot;SUPER-3\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]}], :retentions [{:tax_category \&quot;RET_FUENTE\&quot;, :tax_rate 15.0} {:tax_category \&quot;RET_IVA\&quot;, :tax_rate 15.0}]}})&quot;, :offset 10, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-map]\n  (let [customer (:customer invoice-map)\n        items (:items invoice-map)\n        retentions (:retentions invoice-map)]\n    (-&gt; {}\n        (assoc :invoice/issue_date (:issue_date invoice-map))\n        (assoc :invoice/payment_means_type (:payment_means_type invoice-map))\n        (assoc :invoice/number (:number invoice-map))\n        (assoc :invoice/order_reference (:order_reference invoice-map))\n        (assoc :invoice/payment_date (:payment_date invoice-map))\n        (assoc :invoice/payment_means (:payment_means invoice-map))\n        (assoc :invoice/customer {:customer/company_name (:company_name customer)\n                                  :customer/email (:email customer)})\n        (assoc :invoice/items (map (fn [item]\n                                     (-&gt; {}\n                                         (assoc :invoice-item/price (:price item))\n                                         (assoc :invoice-item/quantity (:quantity item))\n                                         (assoc :invoice-item/sku (:sku item))\n                                         (assoc :invoice-item/taxes (map (fn [tax]\n                                                                           (-&gt; {}\n                                                                               (assoc :tax/tax_category (:tax_category tax))\n                                                                               (assoc :tax/tax_rate (:tax_rate tax))))\n                                                                         (:taxes item)))))\n                                   items))\n        (assoc :invoice/retentions (map (fn [tax]\n                                          (-&gt; {}\n                                              (assoc :tax/tax_category (:tax_category tax))\n                                              (assoc :tax/tax_rate (:tax_rate tax))))\n                                        retentions)))))&quot;, :offset 1939, :ns &quot;invoice-spec&quot;} {:command &quot;(transform-invoice {:invoice {:payment_means_type \&quot;DEBITO\&quot;, :order_reference \&quot;PEDID_0001\&quot;, :number \&quot;1\&quot;, :issue_date \&quot;13/10/2020\&quot;, :payment_date \&quot;12/11/2020\&quot;, :customer {:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;}, :payment_means \&quot;DEBIT_CARD\&quot;, :items [{:price 10000.0, :quantity 1.0, :sku \&quot;SUPER-1\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 5}]} {:price 20000.0, :quantity 1.0, :sku \&quot;SUPER-2\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]} {:price 30000.0, :quantity 1.0, :sku \&quot;SUPER-3\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]}], :retentions [{:tax_category \&quot;RET_FUENTE\&quot;, :tax_rate 15.0} {:tax_category \&quot;RET_IVA\&quot;, :tax_rate 15.0}]}}\n                   )&quot;, :offset 697, :ns &quot;invoice-spec&quot;} {:command &quot;(assoc :invoice/issue_date (:issue_date invoice-data))&quot;, :offset 52, :ns &quot;invoice-spec&quot;} {:command &quot;(-&gt; {}\n    (assoc :invoice/issue_date (:issue_date invoice-data)))&quot;, :offset 65, :ns &quot;invoice-spec&quot;} {:command &quot;/&quot;, :offset 1} {:command &quot;(-&gt; {}\n    (assoc :invoice/issue_date (:invoice/issue_date invoice-data)))&quot;, :offset 48, :ns &quot;invoice-spec&quot;} {:command &quot;(-&gt; {}\n    (assoc :invoice/issue_date (:issue_date {:invoice {:payment_means_type \&quot;DEBITO\&quot;, :order_reference \&quot;PEDID_0001\&quot;, :number \&quot;1\&quot;, :issue_date \&quot;13/10/2020\&quot;, :payment_date \&quot;12/11/2020\&quot;, :customer {:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;}, :payment_means \&quot;DEBIT_CARD\&quot;, :items [{:price 10000.0, :quantity 1.0, :sku \&quot;SUPER-1\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 5}]} {:price 20000.0, :quantity 1.0, :sku \&quot;SUPER-2\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]} {:price 30000.0, :quantity 1.0, :sku \&quot;SUPER-3\&quot;, :taxes [{:tax_category \&quot;IVA\&quot;, :tax_rate 19}]}], :retentions [{:tax_category \&quot;RET_FUENTE\&quot;, :tax_rate 15.0} {:tax_category \&quot;RET_IVA\&quot;, :tax_rate 15.0}]}})))&quot;, :offset 709, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice]\n  (let [customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))&quot;, :offset 1390, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice]\n  (let [customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    (println customer)\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))&quot;, :offset 1413, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice]\n  (let [customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    (println (:customer invoice))\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))&quot;, :offset 1424, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice]\n  (let [customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    (println invoice)\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))\n&quot;, :offset 1413, :ns &quot;invoice-spec&quot;} {:command &quot;(::invoice invoice-data)&quot;, :offset 23, :ns &quot;invoice-spec&quot;} {:command &quot;(:invoice invoice-data)&quot;, :offset 1, :ns &quot;invoice-spec&quot;} {:command &quot;(:invoice :issue_date  invoice-data)&quot;, :offset 21, :ns &quot;invoice-spec&quot;} {:command &quot;(get invoice-data :invoice/issue_date)&quot;, :offset 37, :ns &quot;invoice-spec&quot;} {:command &quot;(get invoice-data :invoice :issue_date)&quot;, :offset 28, :ns &quot;invoice-spec&quot;} {:command &quot;(def (:invoice invoice-data))&quot;, :offset 27, :ns &quot;invoice-spec&quot;} {:command &quot;(def prueba (:invoice invoice-data))&quot;, :offset 11, :ns &quot;invoice-spec&quot;} {:command &quot;(:customer prueba)&quot;, :offset 17, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    (println invoice)\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))&quot;, :offset 1457, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                               :payment_means \&quot;DEBIT_CARD\&quot;,\n                               :items (#:invoice-item{:price 10000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-1\&quot;,\n                                                      :taxes #object[clojure.core$map$fn__5931\n                                                                     0x64331ad3\n                                                                     \&quot;clojure.core$map$fn__5931@64331ad3\&quot;]}\n                                        #:invoice-item{:price 20000.0,\n                                                       :quantity 1.0,\n                                                       :sku \&quot;SUPER-2\&quot;,\n                                                       :taxes #object[clojure.core$map$fn__5931\n                                                                      0x277e5b88\n                                                                      \&quot;clojure.core$map$fn__5931@277e5b88\&quot;]}\n                                        #:invoice-item{:price 30000.0,\n                                                       :quantity 1.0,\n                                                       :sku \&quot;SUPER-3\&quot;,\n                                                       :taxes #object[clojure.core$map$fn__5931 0x82f6fb0 \&quot;clojure.core$map$fn__5931@82f6fb0\&quot;]}),\n                               :payment_means_type \&quot;DEBITO\&quot;,\n                               :retentions (#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}),\n                               :order_reference \&quot;PEDID_0001\&quot;,\n                               :number \&quot;1\&quot;,\n                               :issue_date \&quot;13/10/2020\&quot;,\n                               :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 1969, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                               :payment_means \&quot;DEBIT_CARD\&quot;,\n                               :payment_means_type \&quot;DEBITO\&quot;,\n                               :order_reference \&quot;PEDID_0001\&quot;,\n                               :number \&quot;1\&quot;,\n                               :issue_date \&quot;13/10/2020\&quot;,\n                               :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 258, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (doall (map (fn [tax]\n                                                              {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                               :tax/tax_rate (-&gt; tax :tax_rate)}))\n                                                       (:taxes item))})\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))\n&quot;, :offset 1498, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (map (fn [retention]\n                                {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                 :tax/tax_rate (-&gt; retention :tax_rate)})\n                              retentions)\n     }))&quot;, :offset 1435, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                              :payment_means \&quot;DEBIT_CARD\&quot;,\n                              \n                              :payment_means_type \&quot;DEBITO\&quot;,\n                              :retentions (#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}),\n                              :order_reference \&quot;PEDID_0001\&quot;,\n                              :number \&quot;1\&quot;,\n                              :issue_date \&quot;13/10/2020\&quot;,\n                              :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 226, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                              :payment_means \&quot;DEBIT_CARD\&quot;,\n                              \n                              :payment_means_type \&quot;DEBITO\&quot;,\n                              :retentions (#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}),\n                              :order_reference \&quot;PEDID_0001\&quot;,\n                              :number \&quot;1\&quot;,\n                              :issue_date \&quot;13/10/2020\&quot;,\n                              :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 10, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (map (fn [item]\n                           {:invoice-item/price (:price item)\n                            :invoice-item/quantity (:quantity item)\n                            :invoice-item/sku (:sku item)\n                            :invoice-item/taxes (map (fn [tax]\n                                                       {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                        :tax/tax_rate (-&gt; tax :tax_rate)}))\n                            })\n                         items)\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))\n&quot;, :offset 1457, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (map (fn [tax]\n                                                            {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                             :tax/tax_rate (-&gt; tax :tax_rate)}))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))&quot;, :offset 1502, :ns &quot;invoice-spec&quot;} {:command &quot;(s/def :tax/tax_category #{:RET_IVA, :RET_FUENTE})&quot;, :offset 50, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                               :payment_means \&quot;DEBIT_CARD\&quot;,\n                               \n                               :payment_means_type \&quot;DEBITO\&quot;,\n                               :retentions [#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}],\n                               :order_reference \&quot;PEDID_0001\&quot;,\n                               :number \&quot;1\&quot;,\n                               :issue_date \&quot;13/10/2020\&quot;,\n                               :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 229, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  :tax/tax_rate (-&gt; tax :tax_rate)})))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))&quot;, :offset 1518, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (map (fn [tax]\n                                                            {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                             :tax/tax_rate (-&gt; tax :tax_rate)\n                                                             :tax tax})\n                                                          (:taxes item))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))\n&quot;, :offset 1645, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (map (fn [tax]\n                                                            {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                             :tax/tax_rate (-&gt; tax :tax_rate)\n                                                            })\n                                                          (:taxes item))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))\n&quot;, :offset 1636, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  :tax/tax_rate (-&gt; tax :tax_rate)\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))\n&quot;, :offset 1663, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json/read-str json-str :key-fn keyword))]\n    (s/valid? ::invoice (transform-invoice invoice-data))))&quot;, :offset 195, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json/read-str json-str :key-fn keyword))]\n    (s/valid? ::invoice (transform-invoice invoice-map))))&quot;, :offset 194, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  :tax/tax_rate (-&gt; tax :tax_rate)\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))&quot;, :offset 1662, :ns &quot;invoice-spec&quot;} {:command &quot;(s/def :tax/tax_category #{:RET_IVA, :RET_FUENTE, :iva})&quot;, :offset 56, :ns &quot;invoice-spec&quot;} {:command &quot;(s/def :tax/tax_category #{:RET_IVA, :RET_FUENTE, :IVA})&quot;, :offset 56, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                               :payment_means \&quot;DEBIT_CARD\&quot;,\n                               :items [#:invoice-item{:price 10000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-1\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 5}]}\n                                       #:invoice-item{:price 20000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-2\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 19}]}\n                                       #:invoice-item{:price 30000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-3\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 19}]}],\n                               :payment_means_type \&quot;DEBITO\&quot;,\n                               :retentions [#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}],\n                               :order_reference \&quot;PEDID_0001\&quot;,\n                               :number \&quot;1\&quot;,\n                               :issue_date \&quot;13/10/2020\&quot;,\n                               :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 1561, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (double (-&gt; tax :tax_category keyword))\n                                                                  :tax/tax_rate (double (-&gt; tax :tax_rate))\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))\n&quot;, :offset 1681, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; (double tax) :tax_category keyword)\n                                                                  :tax/tax_rate (-&gt; (double tax) :tax_rate)\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))&quot;, :offset 1680, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword double)\n                                                                  :tax/tax_rate (-&gt; tax :tax_rate double)\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))&quot;, :offset 1676, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  (Double/parseDouble (str (:tax_rate tax)))\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))&quot;, :offset 1672, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  :tax/tax_rate (Double/parseDouble (str (:tax_rate tax)))\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (-&gt; retention :tax_rate)})\n                                   retentions))\n     }))\n&quot;, :offset 1687, :ns &quot;invoice-spec&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  :tax/tax_rate (Double/parseDouble (str (:tax_rate tax)))\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (Double/parseDouble (str (:tax_rate retention)))\n                                      })\n                                   retentions))\n     }))\n&quot;, :offset 1750, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [invoice (transform-invoice invoice-data)]\n    (s/valid? ::invoice (transform-invoice invoice))))\n\n(validate-invoice \&quot;invoice.json\&quot;)\n&quot;, :offset 174, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                               :payment_means \&quot;DEBIT_CARD\&quot;,\n                               :items [#:invoice-item{:price 10000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-1\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 5.0}]}\n                                       #:invoice-item{:price 20000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-2\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 19.0}]}\n                                       #:invoice-item{:price 30000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-3\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 19.0}]}],\n                               :payment_means_type \&quot;DEBITO\&quot;,\n                               :retentions [#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}],\n                               :order_reference \&quot;PEDID_0001\&quot;,\n                               :number \&quot;1\&quot;,\n                               :issue_date \&quot;13/10/2020\&quot;,\n                               :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 1567, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice #:invoice{:customer #:customer{:company_name \&quot;ANDRADE RODRIGUEZ MANUEL ALEJANDRO\&quot;, :email \&quot;cgallegoaecu@gmail.com\&quot;},\n                               :payment_means \&quot;DEBIT_CARD\&quot;,\n                               :items [#:invoice-item{:price 10000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-1\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 5.0}]}\n                                       #:invoice-item{:price 20000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-2\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 19.0}]}\n                                       #:invoice-item{:price 30000.0,\n                                                      :quantity 1.0,\n                                                      :sku \&quot;SUPER-3\&quot;,\n                                                      :taxes [#:tax{:tax_category :IVA, :tax_rate 19.0}]}],\n                               :payment_means_type \&quot;DEBITO\&quot;,\n                               :retentions [#:tax{:tax_category :RET_FUENTE, :tax_rate 15.0} #:tax{:tax_category :RET_IVA, :tax_rate 15.0}],\n                               :order_reference \&quot;PEDID_0001\&quot;,\n                               :number \&quot;1\&quot;,\n                               :issue_date \&quot;13/10/2020\&quot;,\n                               :payment_date \&quot;12/11/2020\&quot;})&quot;, :offset 9, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [invoice (transform-invoice invoice-data)]\n    (prn invoice)\n    (s/valid? ::invoice (transform-invoice invoice))))&quot;, :offset 156, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json1/parse-string json-str true))]\n    (s/valid? ::invoice (transform-invoice invoice-map))))&quot;, :offset 188, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json1/parse-string json-str true))]\n    (transform-invoice invoice-map)\n    (s/valid? ::invoice (transform-invoice invoice-map))))&quot;, :offset 224, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json1/parse-string json-str true))]\n    (prn invoice-map)\n    (s/valid? ::invoice (transform-invoice invoice-map))))&quot;, :offset 210, :ns &quot;invoice-spec&quot;} {:command &quot;(transform-invoice invoice-data)\n(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json1/parse-string json-str true))]\n    (prn invoice-map)\n    (s/explain ::invoice (transform-invoice invoice-map))))\n&quot;, :offset 245, :ns &quot;invoice-spec&quot;} {:command &quot;(transform-invoice invoice-data)&quot;, :offset 32, :ns &quot;invoice-spec&quot;} {:command &quot;(def dta (transform-invoice invoice-data))&quot;, :offset 42, :ns &quot;invoice-spec&quot;} {:command &quot;(dta)&quot;, :offset 4, :ns &quot;invoice-spec&quot;} {:command &quot;(s/explain ::invoice dta)&quot;, :offset 24, :ns &quot;invoice-spec&quot;} {:command &quot;(s/valid? ::invoice dta)&quot;, :offset 9, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json1/parse-string json-str true))\n        invoice (transform-invoice invoice-data)]\n    (s/explain ::invoice invoice)))\n&quot;, :offset 215, :ns &quot;invoice-spec&quot;} {:command &quot;(ns invoice-spec\n  (:require\n    [clojure.spec.alpha :as s]\n    [cheshire.core :as json]))&quot;, :offset 90, :ns &quot;invoice-spec&quot;} {:command &quot;(ns invoice-spec\n  (:require\n    [clojure.spec.alpha :as s]\n    [cheshire.core :as json]))\n&quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (set (json/parse-string json-str true))\n        invoice (transform-invoice invoice-map)]\n    (s/valid? ::invoice invoice)))&quot;, :offset 211, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (json1/parse-string json-str true)\n        invoice (transform-invoice invoice-map)]\n    (s/valid? ::invoice invoice)))&quot;, :offset 206, :ns &quot;invoice-spec&quot;} {:command &quot;(ns invoice-spec\n  (:require\n    [clojure.data.json :as json]\n    [clojure.spec.alpha :as s]\n    [clojure.spec.gen.alpha :as gen]\n    [cheshire.core :as json1]))\n&quot;, :offset 162, :ns &quot;user&quot;} {:command &quot;(defn transform-invoice [invoice-json]\n  (let [invoice (:invoice invoice-json)\n        customer (:customer invoice)\n        items (:items invoice)\n        retentions (:retentions invoice)]\n    {:invoice/issue_date (:issue_date invoice)\n     :invoice/payment_means_type (:payment_means_type invoice)\n     :invoice/number (:number invoice)\n     :invoice/order_reference (:order_reference invoice)\n     :invoice/payment_date (:payment_date invoice)\n     :invoice/payment_means (:payment_means invoice)\n     :invoice/customer {:customer/company_name (:company_name customer)\n                        :customer/email (:email customer)}\n     :invoice/items (vec (map (fn [item]\n                                {:invoice-item/price (:price item)\n                                 :invoice-item/quantity (:quantity item)\n                                 :invoice-item/sku (:sku item)\n                                 :invoice-item/taxes (vec (map (fn [tax]\n                                                                 {:tax/tax_category (-&gt; tax :tax_category keyword)\n                                                                  :tax/tax_rate (Double/parseDouble (str (:tax_rate tax)))\n                                                                  })\n                                                               (:taxes item)))\n                                 })\n                              items))\n     :invoice/retentions (vec (map (fn [retention]\n                                     {:tax/tax_category (-&gt; retention :tax_category keyword)\n                                      :tax/tax_rate (Double/parseDouble (str (:tax_rate retention)))\n                                      })\n                                   retentions))\n     }))&quot;, :offset 1749, :ns &quot;invoice-spec&quot;} {:command &quot;(defn validate-invoice [filename]\n  (let [json-str (slurp filename)\n        invoice-map (json1/parse-string json-str true)\n        invoice (transform-invoice invoice-map)]\n    (s/valid? ::invoice invoice)))\n&quot;, :offset 207, :ns &quot;invoice-spec&quot;} {:command &quot;(s/def :invoice/payment_date string?)\n(s/def :invoice/payment_means string?)\n(s/def :invoice/payment-means-type string?)\n(s/def :invoice/order_reference string?)\n(s/def :invoice/number string?)\n(s/def :customer/company_name string?)\n(s/def :customer/email string?)\n(s/def :invoice/customer (s/keys :req [:customer/company_name\n                                       :customer/email]))\n\n(s/def :tax/tax_rate double?)\n(s/def :tax/tax_category #{:RET_IVA, :RET_FUENTE, :IVA})\n(s/def ::tax (s/keys :req [:tax/tax_category\n                           :tax/tax_rate]))\n(s/def :invoice-item/taxes (s/coll-of ::tax :kind vector? :min-count 1))\n\n(s/def :invoice-item/price double?)\n(s/def :invoice-item/quantity double?)\n(s/def :invoice-item/sku string?)\n\n(s/def ::invoice-item\n  (s/keys :req [:invoice-item/price\n                :invoice-item/quantity\n                :invoice-item/sku\n                :invoice-item/taxes]))\n\n(s/def :invoice/issue_date string?)\n(s/def :invoice/items (s/coll-of ::invoice-item :kind vector? :min-count 1))\n\n(s/def :invoice/retentions (s/coll-of ::tax :kind vector? :min-count 1))\n\n(s/def ::invoice\n  (s/keys :req [:invoice/payment_means_type\n                :invoice/number\n                :invoice/issue_date\n                :invoice/payment_date\n                :invoice/customer\n                :invoice/payment_means\n                :invoice/items\n                :invoice/retentions]))&quot;, :offset 1414, :ns &quot;invoice-spec&quot;} {:command &quot;(validate-invoice \&quot;invoice.json\&quot;)&quot;, :offset 33, :ns &quot;invoice-spec&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.clojure-challenge">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="clojure-challenge" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="clojure-challenge" />
      <setting name="displayName" value="clojure-challenge" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Run tests in invoice-item-test" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="clojure-challenge" />
      <option name="namespace" value="invoice-item-test" />
      <option name="selector" value="SINGLE_NS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test invoice-item-test/test-subtotal-with-discount" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="clojure-challenge" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="invoice-item-test/test-subtotal-with-discount" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test invoice-item-test/test-subtotal-with-zero-price" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="clojure-challenge" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="invoice-item-test/test-subtotal-with-zero-price" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test invoice-item-test/test-subtotal-without-discount" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="clojure-challenge" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="invoice-item-test/test-subtotal-without-discount" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="Test invoice-item/test-subtotal-without-discount" type="ClojureTestRunConfiguration" factoryName="clojure.test" temporary="true">
      <module name="clojure-challenge" />
      <option name="selector" value="SINGLE_VAR" />
      <option name="varFqn" value="invoice-item/test-subtotal-without-discount" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="JetRunConfigurationType">
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
      <option name="filePath" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="clojure.test.Run tests in invoice-item-test" />
      <item itemvalue="clojure.test.Test invoice-item-test/test-subtotal-with-discount" />
      <item itemvalue="clojure.test.Test invoice-item-test/test-subtotal-with-zero-price" />
      <item itemvalue="clojure.test.Test invoice-item-test/test-subtotal-without-discount" />
      <item itemvalue="clojure.test.Test invoice-item/test-subtotal-without-discount" />
      <item itemvalue="Clojure REPL.clojure-challenge" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="clojure.test.Run tests in invoice-item-test" />
        <item itemvalue="clojure.test.Test invoice-item-test/test-subtotal-with-discount" />
        <item itemvalue="clojure.test.Test invoice-item-test/test-subtotal-with-zero-price" />
        <item itemvalue="clojure.test.Test invoice-item-test/test-subtotal-without-discount" />
        <item itemvalue="clojure.test.Test invoice-item/test-subtotal-without-discount" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c6448b02-b25e-4e43-95ed-dc1960bf2f24" name="Changes" comment="" />
      <created>1678828159137</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1678828159137</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>